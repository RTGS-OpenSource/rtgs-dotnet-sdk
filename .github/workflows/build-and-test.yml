name: RTGS .NET SDK Build Test Publish

# this workflow will always build and test for a PR or a push to main or a release
# it can publish a nuget package too but only under these circumstances:
# 1 - a push to main will cause a Nuget package to be built and published to the private AzureArtifacts feed
# 2 - creating a release will cause a Nuget package to be built and published to the public Nuget.org feed
#
# Finally if pushing to main - documentation will also be built

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:

env:
  SOLUTION_FOLDER: ./src/RTGS.DotNetSDK/
  PUBLISHER_FOLDER: ./src/RTGS.DotNetSDK/RTGS.DotNetSDK.Publisher/
  SUBSCRIBER_FOLDER: ./src/RTGS.DotNetSDK/RTGS.DotNetSDK.Subscriber/
  AZURE_ARTIFACTS_URL: https://pkgs.dev.azure.com/rtgs-global/RTGS-Global/_packaging/RTGS-Packages/nuget/v3/index.json
  NUGET_URL: https://api.nuget.org/v3/index.json

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
      - name: dotnet Tool Manifest
        run: dotnet new tool-manifest
      - name: Install dotnet format
        run: dotnet tool install dotnet-format
      - name: dotnet Format
        run: dotnet format ${{env.SOLUTION_FOLDER}} --verify-no-changes
      - name: dotnet build
        run: dotnet build --configuration Release ${{env.SOLUTION_FOLDER}}
      - name: dotnet test
        run: |
          dotnet tool install dotnet-reportgenerator-globaltool --tool-path ./tools
          dotnet test --configuration Release ${{env.SOLUTION_FOLDER}} --no-build --results-directory "./test_results" --logger "trx;LogFilePrefix=results;" --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true
          ./tools/reportgenerator -reports:./test_results/**/coverage.cobertura.xml -targetdir:./test_results/CodeCoverage -reporttypes:Cobertura
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v2
        with:
          name: dotnet-test-results
          path: ./test_results/*.trx
        if: ${{ always() }}
      - uses: 5monkeys/cobertura-action@master
        with:
          path: test_results/CodeCoverage/Cobertura.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 70
          fail_below_threshold: true
          show_branch: true

  publish-to-devops-artifacts:
    # if pushing to main then publish to Azure Artifacts (this is pre-release so keep private)
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push')
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      # require v1 here so that MinVer has access to history to determine version number to apply
      - uses: actions/checkout@v1
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          source-url: ${{env.AZURE_ARTIFACTS_URL}}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.AZURE_ARTIFACTS_PAT }}

      - name: dotnet build and publish
        run: |
          dotnet build --configuration Release ${{env.SOLUTION_FOLDER}}
          dotnet pack -c Release ${{env.PUBLISHER_FOLDER}}RTGS.DotNetSDK.Publisher.csproj
          dotnet pack -c Release ${{env.SUBSCRIBER_FOLDER}}RTGS.DotNetSDK.Subscriber.csproj

      - name: 'dotnet publish'
        run: |
          dotnet nuget push ${{env.PUBLISHER_FOLDER}}bin/Release/*.nupkg -k AzureArtifacts
          dotnet nuget push ${{env.SUBSCRIBER_FOLDER}}bin/Release/*.nupkg -k AzureArtifacts

  publish-to-nuget:
    # if releasing then publish to public nuget repository
    if: github.event_name == 'release'
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      # require v1 here so that MinVer has access to history to determine version number to apply
      - uses: actions/checkout@v1
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
      - name: dotnet build and publish
        run: |
          dotnet build --configuration Release ${{env.SOLUTION_FOLDER}}
          dotnet pack -c Release ${{env.PUBLISHER_FOLDER}}RTGS.DotNetSDK.Publisher.csproj
          dotnet pack -c Release ${{env.SUBSCRIBER_FOLDER}}RTGS.DotNetSDK.Subscriber.csproj

      - name: 'dotnet publish'
        run: |
          dotnet nuget push ${{env.PUBLISHER_FOLDER}}bin/Release/*.nupkg -k ${{ secrets.NUGET_TOKEN }} -s ${{env.NUGET_URL}}
          dotnet nuget push ${{env.SUBSCRIBER_FOLDER}}bin/Release/*.nupkg -k ${{ secrets.NUGET_TOKEN }} -s ${{env.NUGET_URL}}

  generate-docs:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-and-test
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
      - name: Setup DocFX
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install docfx
      - name: DocFX Build
        run: docfx docs/docfx.json
        continue-on-error: false
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: doc-site
          path: 'docs/_site'
